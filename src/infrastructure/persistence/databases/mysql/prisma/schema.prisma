// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserStatus {
  ONLINE
  OFFLINE
  BUSY
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
}

enum ParticipantType {
  ADMIN
  MEMBER
}

enum UserRole {
  ADMIN
  USER
}

enum UserProvider {
  GOOGLE
  FACEBOOK
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// Models
model Post {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(255)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique @db.VarChar(255)
  firstName String?     @map("first_name") @db.VarChar(255)
  lastName  String?     @map("last_name") @db.VarChar(255)
  role      UserRole?
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  avatar    String?
  isActive  Boolean     @default(true) @map("is_active")
  status    UserStatus? // Enum for online, offline, busy

  messages             Message[]             @relation("Sender")
  conversations        Conversation[]        @relation("Creator")
  participants         Participant[]
  deletedMessages      DeletedMessage[]
  deletedConversations DeletedConversation[]
  contactOwners        Contact[]             @relation("ContactOwner")
  contactUsers         Contact[]             @relation("ContactUser")

  federatedCredential    FederatedCredential?
  credentialBased        CredentialBasedAuth?
  friendRequestSenders   FriendRequest[]      @relation("ReceiverId")
  friendRequestReceivers FriendRequest[]      @relation("SenderId")
}

model FederatedCredential {
  id             String       @id @default(uuid())
  userId         String       @unique @map("user_id") @db.VarChar(255)
  provider       UserProvider @map("provider")
  providerUserId String       @map("provider_user_id") @db.VarChar(255)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId, provider])
}

model CredentialBasedAuth {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id") @db.VarChar(255)
  password  String   @map("password") @db.VarChar(255)
  phone     String?  @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
}

model Message {
  id               String       @id @default(uuid())
  senderId         String       @map("sender_id") @db.VarChar(255)
  conversationId   String       @map("conversation_id")
  messageType      MessageType? @map("message_type") // Enum for text, image, video, file
  replyToMessageId String?      @map("reply_to_message_id")
  content          String?
  extra            Json?
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("Sender", fields: [senderId], references: [id])
  replyToMessage Message?     @relation("Reply", fields: [replyToMessageId], references: [id])
  replies        Message[]    @relation("Reply")

  deletedMessages DeletedMessage[]
  attachments     Attachment[]
}

model Conversation {
  id         String    @id @default(uuid())
  title      String?
  creatorId  String    @map("creator_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  isArchived Boolean   @default(false) @map("is_archived")
  deletedAt  DateTime? @map("deleted_at")

  creator User @relation("Creator", fields: [creatorId], references: [id])

  conversationParticipants Participant[]
  deletedConversations     DeletedConversation[]
  Message                  Message[]
}

model Participant {
  id             String           @id @default(uuid())
  conversationId String           @map("conversation_id")
  userId         String           @map("user_id")
  type           ParticipantType? // Enum for admin, member
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])

  @@index([conversationId, userId])
}

model DeletedMessage {
  id        String   @id @default(uuid())
  messageId String?  @map("message_id")
  userId    String?  @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  message Message? @relation(fields: [messageId], references: [id])
  user    User?    @relation(fields: [userId], references: [id])
}

model DeletedConversation {
  id             String   @id @default(uuid())
  conversationId String   @map("conversation_id")
  userId         String   @map("user_id")
  createdAt      DateTime @default(now()) @map("created_at")

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])
}

model Contact {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  contactId String   @map("contact_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User @relation("ContactOwner", fields: [userId], references: [id])
  contact User @relation("ContactUser", fields: [contactId], references: [id])

  @@index([userId, contactId])
}

model Attachment {
  id        String   @id @default(uuid())
  messageId String   @map("message_id")
  thumbUrl  String?  @map("thumb_url")
  fileUrl   String?  @map("file_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  message Message @relation(fields: [messageId], references: [id])
}

model FriendRequest {
  id         String              @id @default(uuid())
  senderId   String              @map("sender_id")
  receiverId String              @map("receiver_id")
  status     FriendRequestStatus @map("status")
  createdAt  DateTime            @default(now()) @map("created_at")

  sender   User    @relation("SenderId", fields: [senderId], references: [id])
  receiver User    @relation("ReceiverId", fields: [receiverId], references: [id])
  userId   String?

  @@index([senderId, receiverId])
}
